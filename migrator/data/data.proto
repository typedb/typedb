/*
 * Copyright (C) 2021 Vaticle
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

//
//               _  _____ _____ _____ _   _ _____ ___ ___  _   _ _
//              / \|_   _|_   _| ____| \ | |_   _|_ _/ _ \| \ | | |
//             / _ \ | |   | | |  _| |  \| | | |  | | | | |  \| | |
//            / ___ \| |   | | | |___| |\  | | |  | | |_| | |\  |_|
//           /_/   \_\_|   |_| |_____|_| \_| |_| |___\___/|_| \_(_)
//
//              THIS PROTOCOL MUST REMAIN BACKWARDS COMPATIBLE!
//           FAILURE TO ADHERE TO THIS RULE WILL BREAK MIGRATIONS!
//                                               =====
// COMPATIBILITY:
//   If a new protocol must break backwards compatibility, please create a new
//   data protocol specification. Please also study Protobuf documentation to
//   ensure any changes made here are backwards compatible changes.
//
//            As a rule of thumb, DO NOT CHANGE THE FIELD NUMBERS!
//                                ================================
//
// ABOUT:
//   This protocol represents the wire format of typedb items in a migration,
//   such as for an exported file or for migrating data over a streaming
//   service.
//
// FILE FORMAT:
//   * Files using this protocol MUST be a standard protobuf delimited stream of
//     `Item` messages
//   * The first message SHOULD be an `item = Item.Header` and there SHOULD be
//     no further header messages.
//   * An `Item.Checksum` SHOULD appear at some point in the file. This MUST be
//     a complete checksum of the final counts of the items, so multiple
//     checksums are redundant.
//   * When reading the file the items MUST be assumed to be in any order, this
//     is to support parallel exports and imports.
//

syntax = "proto3";

option java_package = "com.vaticle.typedb.core.migrator.data";
option java_outer_classname = "DataProto";

package data;

message Item {
    oneof item {
        Attribute attribute = 1;
        Entity entity = 2;
        Relation relation = 3;

        Header header = 15;
        Checksums checksums = 16;
    }

    message Entity {
        string id = 1;
        string label = 2;
        repeated OwnedAttribute attribute = 3;
    }

    message Attribute {
        string id = 1;
        string label = 2;
        repeated OwnedAttribute attribute = 3;
        ValueObject value = 4;
    }

    message Relation {
        string id = 1;
        string label = 2;
        repeated OwnedAttribute attribute = 3;
        repeated Role role = 4;
        message Role {
            string label = 1;
            repeated Player player = 2;
            message Player {
                string id = 1;
            }
        }
    }

    message OwnedAttribute {
        string id = 1;
    }

    message Header {
        string typedb_version = 1;
        string original_database = 2;
    }

    message Checksums {
        int64 entity_count = 1;
        int64 attribute_count = 2;
        int64 relation_count = 3;
        int64 role_count = 4;
        int64 ownership_count = 5;
        int64 key_ownership_count = 6;
    }
}

// Attribute Value object
message ValueObject {
    oneof value {
        string string = 1;
        bool boolean = 2;
        int64 long = 3;
        double double = 4;
        int64 datetime = 5; // time since epoch in milliseconds
    }
}
