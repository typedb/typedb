#
# Copyright (C) 2022 Vaticle
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

define

symbol sub attribute, value string;
name sub attribute, value string;
full-name sub attribute, value string;
description sub attribute, value string;
priority sub attribute, value long;
access-token sub attribute, value string;
github-token sub attribute, value string;
org-role sub attribute, value string;
permission sub attribute, value string;
fork sub attribute, value boolean;
parent-github-id sub attribute, value long;
default sub attribute, value boolean;
sync sub attribute, value boolean;
sha sub attribute, value string;
created sub attribute, value datetime;
version-candidate sub attribute, value string;
reference-type sub attribute, value string;
format sub attribute, value string;
content sub attribute, value string;
error sub attribute, value string;
command sub attribute, value string;
monitor sub attribute, value string;
status sub attribute, value string;
job-type sub attribute, value string;
started sub attribute, value datetime;
ended sub attribute, value datetime;
duration sub attribute, value long;
id sub attribute, value string;
analysis-id sub attribute, value long;
run sub attribute, value long;
latest sub attribute, value boolean;
path sub attribute, value string;
label sub attribute, value string;
iteration sub attribute, value long;
data sub attribute, value string;
config sub attribute, value string;
installation-id sub attribute, value string;
active sub attribute, value boolean;
private sub attribute, value boolean;
alias sub attribute, value string;
publisher sub attribute, value string;
offer sub attribute, value string;
sku sub attribute, value string;
os-type sub attribute, value string;
resource-group sub attribute, value string;
user-ssh-public-key sub attribute, value string;
user-ssh-private-key sub attribute, value string;
environment-variable sub attribute, value string;
build-correctness-wait-for-quality sub attribute, value boolean;
build-performance-wait-for-quality sub attribute, value boolean;
build-performance-wait-for-correctness sub attribute, value boolean;
heads sub attribute, value string;
ip sub attribute, value string;
is-approved sub attribute, value boolean;
pattern sub attribute, value string;
index sub attribute, value long;
discord-webhook-url sub attribute, value string;
discord-id sub attribute, value string;

organisation sub entity,
    owns name @key,
    owns full-name,
    owns access-token,
    owns installation-id,
    owns environment-variable,
    owns permission,
    owns discord-webhook-url,
    plays org-team:org,
    plays repo-owner:owner,
    plays org-member:org,
    plays org-installer:org;

org-team sub relation,
    relates org,
    relates team;

org-member sub relation,
    relates org,
    relates member,
    owns org-role;

org-installer sub relation,
    relates org,
    relates installer;

team sub entity,
    owns symbol @key,
    owns name,
    plays org-team:team,
    plays team-member:team,
    plays repo-team:team;

team-member sub relation,
    relates team,
    relates member;

email sub attribute, value string, regex ".+\@.+\..+";

user sub entity,
    owns email,
    owns name @key,
    owns full-name,
    owns access-token,
    owns github-token,
    owns installation-id,
    owns user-ssh-public-key,
    owns user-ssh-private-key,
    owns environment-variable,
    owns discord-webhook-url,
    owns discord-id,
    plays team-member:member,
    plays repo-owner:owner,
    plays repo-collaborator:collaborator,
    plays commit-author:author,
    plays org-member:member,
    plays org-installer:installer;

repository sub entity,
    owns symbol @key,
    owns name,
    owns description,
    owns active,
    owns private,
    owns fork,
    # NOTE: parent-github-id is used to link repo forks together, this is to workaround github doesn't allow querying private children forks.
    # We use github id because the symbol contains repository names and can be renamed
    owns parent-github-id,
    owns environment-variable,
    plays repo-owner:repo,
    plays repo-team:repo,
    plays repo-collaborator:repo,
    plays repo-commit:repo,
    plays repo-reference:repo,
    plays repo-branch-rule:repo,
    plays repo-fork:parent,
    plays repo-fork:child,
    plays repo-dependency:dependee,
    plays repo-dependency:dependant;

repo-fork sub relation,
    relates parent,
    relates child;

rule repo-fork-rule:
    when {
      (parent: $x, child: $y) isa repo-fork;
      (parent: $y, child: $z) isa repo-fork;
    } then {
      (parent: $x, child: $z) isa repo-fork;
    };

repo-dependency sub relation,
    owns reference-type,
    relates dependee,
    relates dependant;

repo-dependency-direct sub repo-dependency;

repo-dependency-transitive sub repo-dependency;

rule repo-dependency-transitive-rule:
    when {
        (dependee: $x, dependant: $y) isa repo-dependency;
        (dependee: $y, dependant: $z) isa repo-dependency;
    } then {
        (dependee: $x, dependant: $z) isa repo-dependency-transitive;
    };

rule repo-dependency-transitive-type-rule:
    when {
        (dependee: $x, dependant: $y) isa repo-dependency, has reference-type $t;
        (dependee: $y, dependant: $z) isa repo-dependency, has reference-type $t;
        $d (dependee: $x, dependant: $z) isa repo-dependency-transitive;
    } then {
        $d has $t;
    };

repo-owner sub relation,
    relates repo,
    relates owner;

repo-team sub relation,
    relates repo,
    relates team,
    owns permission;

repo-collaborator sub relation,
    relates repo,
    relates collaborator,
    owns permission;

rule repo-collaborator-org-rule:
    when {
        (org: $o, member: $u) isa org-member;
        (repo: $r, owner: $o) isa repo-owner;
    } then {
        (repo: $r, collaborator: $u) isa repo-collaborator;
    };

# TODO: uncomment these after query planning the type resolution query for the `when` terminates in a reasonable time
#rule repo-collaborator-org-member-permission-rule:
#    when {
#        $o isa organisation, has permission $p;
#        (org: $o, member: $u) isa org-member, has org-role "member";
#        (repo: $r, owner: $o) isa repo-owner;
#        $c (repo: $r, collaborator: $u) isa repo-collaborator;
#    } then {
#        $c has $p;
#    };
#
#rule repo-collaborator-org-owner-permission-rule:
#    when {
#        (org: $o, member: $u) isa org-member, has org-role "owner";
#        (repo: $r, owner: $o) isa repo-owner;
#        $c (repo: $r, collaborator: $u) isa repo-collaborator;
#    } then {
#        $c has permission "admin";
#    };
#
#rule repo-collaborator-org-fork-rule:
#    when {
#        (org: $o, member: $u) isa org-member;
#        (repo: $r, owner: $o) isa repo-owner;
#        $r isa repository, has private true;
#        (parent: $r, child: $rc) isa repo-fork;
#    } then {
#        (repo: $rc, collaborator: $u) isa repo-collaborator;
#    }

#rule repo-collaborator-org-fork-member-permission-rule:
#    when {
#        $o isa organisation, has permission $p;
#        (org: $o, member: $u) isa org-member, has org-role "member";
#        (repo: $r, owner: $o) isa repo-owner;
#        $r isa repository, has private true;
#        (parent: $r, child: $rc) isa repo-fork;
#        $c (repo: $rc, collaborator: $u) isa repo-collaborator;
#    } then {
#        $c has $p;
#    };
#
#rule repo-collaborator-org-fork-owner-permission-rule:
#    when {
#        $o isa organisation, has permission $p;
#        (org: $o, member: $u) isa org-member, has org-role "owner";
#        (repo: $r, owner: $o) isa repo-owner;
#        $r isa repository, has private true;
#        (parent: $r, child: $rc) isa repo-fork;
#        $c (repo: $rc, collaborator: $u) isa repo-collaborator;
#    } then {
#        $c has permission "admin";
#    };

rule repo-collaborator-team-rule:
    when {
        (repo: $x, team: $y) isa repo-team;
        (team: $y, member: $z) isa team-member;
    } then {
        (repo: $x, collaborator: $z) isa repo-collaborator;
    };

rule repo-collaborator-team-permission-rule:
  when {
      (repo: $x, team: $y) isa repo-team, has permission $p;
      (team: $y, member: $z) isa team-member;
      $c (repo: $x, collaborator: $z) isa repo-collaborator;
  } then {
      $c has $p;
  };

rule repo-collaborator-user-rule:
   when {
       $owner isa user;
       (repo: $repo, owner: $owner) isa repo-owner;
   } then {
       (repo: $repo, collaborator: $owner) isa repo-collaborator;
   };

rule repo-collaborator-user-permission-rule:
   when {
       $owner isa user;
       (repo: $repo, owner: $owner) isa repo-owner;
       $c (repo: $repo, collaborator: $owner) isa repo-collaborator;
   } then {
       $c has permission "admin";
   };

rule repo-collaborator-permission-admin-has-write-rule:
   when {
       $c isa repo-collaborator, has permission "admin";
   } then {
       $c has permission "write";
   };

rule repo-collaborator-permission-write-has-read-rule:
   when {
       $c isa repo-collaborator, has permission "write";
   } then {
       $c has permission "read";
   };

repo-reference sub relation,
    relates repo,
    relates reference;

repo-commit sub relation,
    relates repo,
    relates commit;

repo-branch-rule sub relation,
    relates repo,
    relates rule;

branch-rule sub entity,
    owns symbol @key, # vaticle/typedb/settings/branch-rule/main
    owns priority,
    owns pattern,
    owns build-correctness-wait-for-quality,
    owns build-performance-wait-for-quality,
    owns build-performance-wait-for-correctness,
    plays repo-branch-rule:rule;

branch sub entity,
    owns symbol @key,
    owns name,
    owns default,
    owns sync,
    owns heads,
    plays repo-reference:reference,
    plays commit-reference:reference,
    plays pipeline-automation:branch;

tag sub entity,
    owns symbol @key,
    owns name,
    owns latest,
    plays repo-reference:reference,
    plays commit-reference:reference,
    plays commit-dependency:dependee,
    plays pipeline-automation:trigger;

commit sub entity,
    owns symbol @key,
    owns sha,
    owns created,
    owns version-candidate,
    plays commit-file:commit,
    plays repo-commit:commit,
    plays pipeline-automation:trigger,
    plays commit-author:commit,
    plays commit-reference:commit,
    plays commit-analysis:commit,
    plays commit-link:previous,
    plays commit-link:next,
    plays commit-dependency:dependee,
    plays commit-dependency:dependant;

commit-author sub relation,
    relates commit,
    relates author;

commit-dependency sub relation,
    relates dependee,
    relates dependant,
    relates analysis,
    owns status;

commit-reference sub relation,
    relates reference,
    relates commit;

commit-link sub relation,
    relates previous,
    relates next;

file sub entity,
    owns name,
    owns format,
    owns content,
    owns error,
    plays commit-file:file;

commit-file sub relation,
    relates commit,
    relates file;

pipeline-automation sub relation,
    relates pipeline,
    relates trigger,
    relates branch;

automation sub entity, abstract,
    owns symbol @key,
    owns run, # atomic
    owns latest,
    owns name,
    owns status,
    owns index,
    owns started,
    owns ended;

pipeline sub automation,
    plays pipeline-automation:pipeline,
    plays pipeline-dependency:dependee,
    plays pipeline-dependency:dependant,
    plays pipeline-workflow:pipeline;

pipeline-release sub pipeline,
    owns is-approved;

pipeline-dependency sub relation,
    relates dependee,
    relates dependant;

pipeline-workflow sub relation,
    relates pipeline,
    relates workflow;

workflow sub automation,
    plays pipeline-workflow:workflow,
    plays workflow-job:workflow,
    plays commit-analysis:producer,
    plays workflow-dependency:dependee,
    plays workflow-dependency:dependant;

workflow-dependency sub relation,
    relates dependee,
    relates dependant;

workflow-job sub relation,
    relates workflow,
    relates job;

job sub automation,
    owns job-type,
    owns command,
    owns monitor,
    owns environment-variable,
    owns ip,
    plays workflow-job:job,
    plays job-image:job,
    plays job-dependency:dependee,
    plays job-dependency:dependant;

job-dependency sub relation,
    relates dependee,
    relates dependant;

job-image sub relation,
    relates job,
    relates image;

image sub entity, abstract,
    owns os-type,
    owns alias,
    owns active,
    plays job-image:image;

marketplace-image sub image,
    owns publisher,
    owns offer,
    owns sku;

custom-image sub image,
    owns resource-group,
    owns name;

commit-analysis sub relation,
    relates producer,
    relates commit,
    relates analysis;

analysis sub entity, abstract,
    owns analysis-id @key,
    owns name,
    owns created,
    plays commit-analysis:analysis;

dependency-analysis sub analysis,
    owns status,
    owns error,
    plays commit-dependency:analysis;

performance-analysis sub analysis,
    plays performance-tracker:analysis,
    plays performance-trace:analysis;

performance-trace sub relation,
    relates analysis,
    relates trace;

performance-tracker sub relation,
    relates analysis,
    relates tracker;

rule performance-trace-rule:
    when {
        (analysis: $x, trace: $y) isa performance-trace;
        (parent: $y, child: $z) isa trace-tree;
    } then {
        (analysis: $x, trace: $z) isa performance-trace;
    };

rule performance-tracker-rule:
    when {
        (analysis: $x, tracker: $y) isa performance-tracker;
        (parent: $y, child: $z) isa tracker-tree;
    } then {
        (analysis: $x, tracker: $z) isa performance-tracker;
    };

rule tracker-trace-rule:
    when {
        (tracker: $x, trace: $y) isa trace-tracker;
        (parent: $y, child: $z) isa trace-tree;
    } then {
        (tracker: $x, trace: $z) isa trace-tracker;
    };

trace sub entity,
    owns id @key,
    owns name,
    owns path,
    owns label,
    owns iteration,
    owns started,
    owns ended,
    owns duration,
    owns data,
    plays performance-trace:trace,
    plays trace-tracker:trace,
    plays trace-tree:parent,
    plays trace-tree:child;

trace-tree sub relation,
    relates parent,
    relates child;

rule trace-label-rule:
    when {
        (parent: $x, child: $y) isa trace-tree;
        $x has label $l;
    } then {
        $y has $l;
    };

rule trace-iteration-rule:
    when {
        (parent: $x, child: $y) isa trace-tree;
        $x has iteration $i;
    } then {
        $y has $i;
    };

tracker sub entity,
    owns id @key,
    owns name,
    owns path,
    plays trace-tracker:tracker,
    plays performance-tracker:tracker,
    plays tracker-tree:parent,
    plays tracker-tree:child;

tracker-tree sub relation,
    relates parent,
    relates child;

trace-tracker sub relation,
    relates tracker,
    relates trace;